import java.util.Stack;

public class Solution {
    public static TreeNode flatten(TreeNode root) {
    	if(root == null || (root.left == null && root.right == null)){
            return root;
        }
        
        Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode point = root;
        while(point != null || !stack.empty()){
            while(point != null){
                stack.push(point);
                point = point.left;
            }
            
            if(!stack.empty()){
                TreeNode node = stack.pop();
                System.out.println("node: " + node.val);
                if(node.right != null){
                    point = node.right;
                    System.out.println("point: " + point.val);
                    System.out.println("size: " + stack.size());
                }
                if(node.left != null){
                    TreeNode right = node.left.right;
                    while(right !=  null){
                        right = right.right;
                    }
                    right = node.right;
                    node.right = node.left;
                    node.left = null;
                }
            }
        }
        return root;
    }
    
    public static void main(String[] args){
    	TreeNode a = new TreeNode(1);
    	TreeNode b = new TreeNode(2);
    	TreeNode c = new TreeNode(3);
    	a.left = b;
    	a.right = c;
    	TreeNode test = flatten(a);
    	print(test);
    }
    
    public static void print(TreeNode root){
    	if(root == null) {System.out.println();}
		
		if(root.left != null){
			print(root.left);
		}
		
		if(root.right != null){
			print(root.right);
		}
		
		System.out.println(root.val);
    }
}