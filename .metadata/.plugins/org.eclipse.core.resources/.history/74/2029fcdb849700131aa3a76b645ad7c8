
import java.util.LinkedList;
/**
 * Feb-10-2014
 * @author Ivoryhe
 * Populating Next Right Pointers in Each Node
 * 
 * Given a binary tree
 * struct TreeLinkNode {
 * 	TreeLinkNode *left;
 * 	TreeLinkNode *right;
 * 	TreeLinkNode *next;
 * }
 * Populate each next pointer to point to its next right node. 
 * If there is no next right node, the next pointer should be set to NULL.
 * 
 * Initially, all next pointers are set to NULL.
 * Note:
 * You may only use constant extra space.
 * You may assume that it is a perfect binary tree 
 * (ie, all leaves are at the same level, and every parent has two children).
 * For example,
 * Given the following perfect binary tree,
 *          1
 *        /  \
 *       2    3
 *      / \  / \
 *     4  5  6  7
 * After calling your function, the tree should look like:
 *          1 -> NULL
 *        /  \
 *      2 -> 3 -> NULL
 *     / \  / \
 *    4->5->6->7 -> NULL
 */
public class Solution {
    public void connect(TreeLinkNode1 root) {
        if(root == null) return;
        LinkedList<TreeLinkNode1> q = new LinkedList<TreeLinkNode1>();
        LinkedList<TreeLinkNode1> list = new LinkedList<TreeLinkNode1>();
        root.next = null;
        
        q.add(root);
        while(q.size() != 0){
            
            TreeLinkNode1 n = q.removeFirst();
            
            
            if(n.left != null){
                list.add(n.left);
            }
            if(n.right != null){
                list.add(n.right);
            }
            
            while(q.size() == 0 && list.size() != 0){
                for(int i=0; i<list.size()-1; i++){
                    list.get(i).next = list.get(i+1);
                }
                list.get(list.size()-1).next = null;
                q = list;
                list = new LinkedList<TreeLinkNode1>();
            }
        }
    }
}