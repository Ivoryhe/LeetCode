public class Solution {
    public static boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;
        int[] row = new int[m];
        if(searchRow(0,n-1,matrix,target,row)){
            if(searchColumn(0,m-1,matrix,target,row)){
                return true;
            }
        }
        return false;
    }
    
    public static boolean searchRow(int start, int end, int[][] matrix, int target, int[] row){
        if(start > end) {return false;}
        if(start == end) {
            row = matrix[start];
            return true;
        }
        int mid = (start+end)/2;
        if(target > matrix[mid+1][0]){
            return searchRow(mid+1, end, matrix, target, row); 
        }
        else{
            return searchRow(start, mid, matrix, target, row);
        }
    }
    
    public static boolean searchColumn(int start, int end, int[][] matrix, int target, int[] row){
        if(start > end) {return false;}
        if(start == end){
            if(row[start] == target){
                return true;
            }
            else{
                return false;
            }
        }
        
        int mid = (start+end)/2;
        if(target > row[mid]){
            return searchColumn(mid+1,end,matrix,target,row);
        }
        else{
            return searchColumn(start,mid,matrix,target,row);
        }
    }
    
    public static void main(String[] args){
    	int[][] A = {{1}};
    	System.out.println(searchMatrix(A,0));
    }
}