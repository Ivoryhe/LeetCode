public class Solution {
	public static boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;
        int rowNum = searchRow(0,n-1,matrix,target);
        int[] row = matrix[rowNum];
        int num = searchColumn(0,m-1,matrix,target,row);
        if(target == row[num]){
            return true;
        }
        else{
            return false;
        }
    }
    
    public static int searchRow(int start, int end, int[][] matrix, int target){
        if(start == end) {
            return start;
        }
        int mid = (start+end)/2;
        if(target > matrix[mid+1][0]){
            return searchRow(mid+1, end, matrix, target); 
        }
        else{
            return searchRow(start, mid, matrix, target);
        }
    }
    
    public static int searchColumn(int start, int end, int[][] matrix, int target, int[] row){
        if(start == end){
            return start;
        }
        
        int mid = (start+end)/2;
        if(target > row[mid]){
            return searchColumn(mid+1,end,matrix,target,row);
        }
        else{
            return searchColumn(start,mid,matrix,target,row);
        }
    }
    
    public static void main(String[] args){
    	int[][] A = {{1},{3}};
    	System.out.println(searchMatrix(A,3));
    }
}